// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # mHue: {value: 0.3, target: mHue}
        # mSaturation: {value: 0.1, target: mSaturation}
        # mBrightness: {value: 1.0, target: mBrightness}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>



  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties {
    float mHue;
    float mSaturation;
    float mBrightness;
  };

  vec3 hueShift(vec3 color, float hueAjuest) {
    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);
			const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);
			const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);

			const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);
			const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);
			const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);

			float   YPrime  = dot (color, kRGBToYPrime);
			float   I       = dot (color, kRGBToI);
			float   Q       = dot (color, kRGBToQ);
			float   hue     = atan (Q, I);
			float   chroma  = sqrt (I * I + Q * Q);

			hue += hueAdjust;

			Q = chroma * sin (hue);
			I = chroma * cos (hue);

			vec3    yIQ   = vec3 (YPrime, I, Q);

			return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );
  }

  vec3 rgb2hsv(vec3 c)
    {
        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

        float d = q.x - min(q.w, q.y);
        float e = 1.0e-10;
        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
    }

   vec3 hsv2rgb(vec3 c)
    {
        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
    }

    vec3 format_rgb(vec3 c) {
        return vec3(c.x, c.x, c.x);
    }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif

    float delta_h = mHue; // _Hue_;  // [0, 1]  色相
    float delta_s = mSaturation; // _Saturation_;  // [0, 1]  饱和度
    float delta_v = mBrightness; //_Brightness_;  // [0, 1]  亮度

    vec3 hsv = rgb2hsv(format_rgb(gl_FragColor.rgb));

    hsv.x = mod(hsv.x * 360.0 + delta_h , 360.0) / 360.0;
    hsv.y = max(0.0, min(hsv.y + delta_s, 1.0));
    hsv.z = max(0.0, min(hsv.z + delta_v, 1.0));

    vec3 rgb = hsv2rgb(hsv);
    if (gl_FragColor.a == 0.0) {
      discard;
    } else {
      gl_FragColor = vec4(rgb.r, rgb.g, rgb.b, gl_FragColor.a);
    }
  }
}%
